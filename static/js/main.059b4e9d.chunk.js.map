{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","error","Error","Calculator","useState","total","next","obj","setResult","showResult","e","buttonName","Number","isNaN","match","includes","parseFloat","calculate","target","value","className","type","onClick","App","props","state","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.059b4e9d.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  try {\n    if (operation === 'รท') {\n      // if ((numberTwo === '0' && numberOne === '0') || numberTwo === '0') {\n      //   return 'ERROR';\n      // }\n      return one.div(two).toString();\n    }\n    if (operation === '%') {\n      return one.mod(two).toString();\n    }\n  } catch (error) {\n    return 'error';\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [obj, setResult] = useState({ total: 0, next: null, operation: null });\n\n  const showResult = (e) => {\n    setResult(calculate(obj, e.target.value));\n  };\n\n  let { total, operation, next } = obj;\n  if (!operation) {\n    operation = '';\n  }\n  if (!next) {\n    next = '';\n  }\n  if (!total && total !== 0) {\n    total = '';\n  }\n  return (\n    <div className=\"Calculator\">\n      <span className=\"input\">{`${total} ${operation} ${next}`}</span>\n      <button type=\"button\" value=\"AC\" className=\"char\" onClick={showResult}>\n        AC\n      </button>\n      <button value=\"+/-\" type=\"button\" className=\"char\" onClick={showResult}>\n        +/-\n      </button>\n      <button value=\"%\" type=\"button\" className=\"char\" onClick={showResult}>\n        %\n      </button>\n      <button\n        value=\"รท\"\n        type=\"button\"\n        className=\"char orange\"\n        onClick={showResult}\n      >\n        รท\n      </button>\n      <button type=\"button\" value=\"7\" className=\"char\" onClick={showResult}>\n        7\n      </button>\n      <button value=\"8\" type=\"button\" className=\"char\" onClick={showResult}>\n        8\n      </button>\n      <button value=\"9\" type=\"button\" className=\"char\" onClick={showResult}>\n        9\n      </button>\n      <button\n        value=\"x\"\n        type=\"button\"\n        className=\"char orange\"\n        onClick={showResult}\n      >\n        x\n      </button>\n      <button value=\"4\" type=\"button\" className=\"char\" onClick={showResult}>\n        4\n      </button>\n      <button value=\"5\" type=\"button\" className=\"char\" onClick={showResult}>\n        5\n      </button>\n      <button value=\"6\" type=\"button\" className=\"char\" onClick={showResult}>\n        6\n      </button>\n      <button\n        value=\"-\"\n        type=\"button\"\n        className=\"char orange\"\n        onClick={showResult}\n      >\n        -\n      </button>\n      <button value=\"1\" type=\"button\" className=\"char\" onClick={showResult}>\n        1\n      </button>\n      <button value=\"2\" type=\"button\" className=\"char\" onClick={showResult}>\n        2\n      </button>\n      <button value=\"3\" type=\"button\" className=\"char\" onClick={showResult}>\n        3\n      </button>\n      <button\n        value=\"+\"\n        type=\"button\"\n        className=\"char orange\"\n        onClick={showResult}\n      >\n        +\n      </button>\n      <button value=\"0\" type=\"button\" className=\"zero\" onClick={showResult}>\n        0\n      </button>\n      <button value=\".\" type=\"button\" className=\"char\" onClick={showResult}>\n        .\n      </button>\n      <button\n        value=\"=\"\n        type=\"button\"\n        className=\"char orange\"\n        onClick={showResult}\n      >\n        =\n      </button>\n    </div>\n  );\n};\n\nexport default Calculator;\n","/* eslint-disable */\r\nimport operate from './operate';\r\n\r\nfunction isNumber(item) {\r\n  return !!item.match(/[0-9]+/);\r\n}\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:s      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === 'AC' || Number.isNaN(Number(obj.total))) {\r\n    return {\r\n      total: 0,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    if (buttonName === '0' && obj.next === '0') {\r\n      return {};\r\n    }\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        return { ...obj, next: obj.next + buttonName };\r\n      }\r\n      return { ...obj, next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      return {\r\n        next: obj.next + buttonName,\r\n        total: null,\r\n      };\r\n    }\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === '.') {\r\n    if (obj.next) {\r\n      if (obj.next.includes('.')) {\r\n        return { ...obj };\r\n      }\r\n      return { ...obj, next: `${obj.next}.` };\r\n    }\r\n    if (obj.operation) {\r\n      return { next: '0.' };\r\n    }\r\n    if (obj.total) {\r\n      if (obj.total.includes('.')) {\r\n        return {};\r\n      }\r\n      return { total: `${obj.total}.` };\r\n    }\r\n    return { total: '0.' };\r\n  }\r\n\r\n  if (buttonName === '=') {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    }\r\n    // '=' with no operation, nothing to do\r\n    return { next: obj.next };\r\n  }\r\n\r\n  if (buttonName === '+/-') {\r\n    if (obj.next) {\r\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation after pressing '='\r\n  if (!obj.next && obj.total && !obj.operation) {\r\n    return { ...obj, operation: buttonName };\r\n  }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    if (obj.total && !obj.next) {\r\n      return { ...obj, operation: buttonName };\r\n    }\r\n\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}\r\n","import React from 'react';\nimport Calculator from './components/Calculator';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}